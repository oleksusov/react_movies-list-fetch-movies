{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","imgUrl","src","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","setMovies","setQuery","useState","loadData","setLoadData","hasLoadingError","setHasLoadingError","loadedMovie","setLoadedMovie","loadMovie","a","movieFromServer","newMovie","Title","Plot","Poster","imdbID","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","onChange","target","value","classNames","onClick","disabled","every","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db542abb.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const noPoster = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          {(movie.imgUrl === 'N/A') ? (\n            <img\n              data-cy=\"moviePoster\"\n              src={noPoster}\n              alt=\"Film logo\"\n            />\n          ) : (\n            <img\n              data-cy=\"moviePoster\"\n              src={movie.imgUrl}\n              alt=\"Film logo\"\n            />\n          )}\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {movie.description}\n          <br />\n          <a href={movie.imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=e4d19130';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\nimport './FindMovie.scss';\n\ntype Props = {\n  movies: Movie[];\n  setMovies: (movie: Movie[]) => void;\n  query: string;\n  setQuery: (query: string) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  movies,\n  setMovies,\n  query,\n  setQuery,\n}) => {\n  const [loadData, setLoadData] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [loadedMovie, setLoadedMovie] = useState<Movie | null>();\n\n  const loadMovie = async () => {\n    setLoadData(true);\n\n    try {\n      const movieFromServer = await getMovie(query);\n\n      setLoadData(false);\n\n      if ('Error' in movieFromServer) {\n        throw new Error('Can&apos;t find movie such a title');\n      } else {\n        const newMovie: Movie = {\n          title: movieFromServer.Title,\n          description: movieFromServer.Plot,\n          imgUrl: movieFromServer.Poster,\n          imdbUrl: `https://www.imdb.com/title/${movieFromServer.imdbID}`,\n          imdbId: movieFromServer.imdbID,\n        };\n\n        setLoadedMovie(newMovie);\n      }\n    } catch (error) {\n      setHasLoadingError(true);\n    }\n  };\n\n  const addMovie = () => {\n    if (loadedMovie\n      && movies.every(movie => movie.imdbId !== loadedMovie.imdbId)) {\n      setMovies([\n        ...movies,\n        loadedMovie,\n      ]);\n    }\n\n    setLoadedMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={event => event.preventDefault()}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              onChange={(event => {\n                setQuery(event.target.value);\n                setHasLoadingError(false);\n              })}\n              value={query}\n            />\n          </div>\n\n          {hasLoadingError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                {\n                  'is-loading': loadData,\n                },\n              )}\n              onClick={loadMovie}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {loadedMovie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {loadedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard\n            movie={loadedMovie}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState('');\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          setMovies={setMovies}\n          query={query}\n          setQuery={setQuery}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}