{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","delay","Promise","resolve","setTimeout","then","fetch","res","json","catch","Response","Error","FindMovie","setMovies","setQuery","useState","loadData","setLoadData","hasLoadingError","setHasLoadingError","loadedMovie","setLoadedMovie","loadMovie","a","movieFromServer","Poster","newMovie","Title","Plot","imdbID","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","onChange","target","value","classNames","onClick","disabled","every","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.082113a1.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | undefined,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie?.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie?.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie?.description}\n        <br />\n        <a href={movie?.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=e4d19130';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return wait(300)\n    .then(() => fetch(`${API_URL}&t=${query}`))\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\nimport './FindMovie.scss';\n\ntype Props = {\n  movies: Movie[];\n  setMovies: (movie: Movie[]) => void;\n  query: string;\n  setQuery: (query: string) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  movies,\n  setMovies,\n  query,\n  setQuery,\n}) => {\n  const [loadData, setLoadData] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [loadedMovie, setLoadedMovie] = useState<Movie | null>();\n\n  const loadMovie = async () => {\n    setLoadData(true);\n\n    try {\n      const movieFromServer = await getMovie(query);\n\n      setLoadData(false);\n\n      if ('Error' in movieFromServer) {\n        throw new Error('Can&apos;t find movie such a title');\n      } else {\n        if (movieFromServer.Poster === 'N/A') {\n          movieFromServer.Poster\n            = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n        }\n\n        const newMovie: Movie = {\n          title: movieFromServer.Title,\n          description: movieFromServer.Plot,\n          imgUrl: movieFromServer.Poster,\n          imdbUrl: `https://www.imdb.com/title/${movieFromServer.imdbID}`,\n          imdbId: movieFromServer.imdbID,\n        };\n\n        setLoadedMovie(newMovie);\n      }\n    } catch (error) {\n      setHasLoadingError(true);\n    }\n  };\n\n  const addMovie = () => {\n    if (loadedMovie\n      && movies.every(movie => movie.imdbId !== loadedMovie.imdbId)) {\n      setMovies([\n        ...movies,\n        loadedMovie,\n      ]);\n    }\n\n    setLoadedMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={event => event.preventDefault()}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              onChange={(event => {\n                setQuery(event.target.value);\n              })}\n              value={query}\n            />\n          </div>\n\n          {hasLoadingError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                {\n                  'is-loading': loadData,\n                },\n              )}\n              onClick={loadMovie}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {loadedMovie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {loadedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard\n            movie={loadedMovie}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState('');\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          setMovies={setMovies}\n          query={query}\n          setQuery={setQuery}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}